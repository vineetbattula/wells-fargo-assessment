{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let WeatherComponent = class WeatherComponent {\n  constructor(http) {\n    this.http = http;\n    this.cities = [];\n    this.cityInput = '';\n    this.apiUrl = 'http://localhost:8080/weather';\n  }\n  addCity() {\n    if (this.cityInput) {\n      const formattedCityName = this.formatCityName(this.cityInput);\n      // Check if the city already exists\n      if (this.isCityDuplicate(formattedCityName)) {\n        alert('City already exists!');\n      } else {\n        this.fetchWeatherData(formattedCityName);\n      }\n      this.cityInput = '';\n    }\n  }\n  formatCityName(cityName) {\n    return cityName.charAt(0).toUpperCase() + cityName.slice(1).toLowerCase();\n  }\n  isCityDuplicate(cityName) {\n    return this.cities.some(city => city.name.toLowerCase() === cityName.toLowerCase());\n  }\n  fetchWeatherData(cityName) {\n    const url = `${this.apiUrl}/${cityName}`;\n    this.http.get(url).subscribe(data => {\n      const cityWeather = {\n        name: cityName,\n        temperature: data.main.temp,\n        humidity: data.main.humidity\n      };\n      this.cities.push(cityWeather);\n    }, error => {\n      console.log(error);\n      alert('Error fetching weather data. Please try again later.');\n    });\n  }\n  removeCity(city) {\n    const index = this.cities.indexOf(city);\n    if (index !== -1) {\n      this.cities.splice(index, 1);\n    }\n  }\n  getBackgroundImageUrl(temperature) {\n    if (temperature > 30) {\n      return '../../assets/sunny.webp';\n    } else if (temperature < 20) {\n      return '../assets/Cold.webp';\n    } else {\n      return '../../assets/sunny.webp';\n    }\n  }\n};\nWeatherComponent = __decorate([Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})], WeatherComponent);","map":{"version":3,"names":["Component","WeatherComponent","constructor","http","cities","cityInput","apiUrl","addCity","formattedCityName","formatCityName","isCityDuplicate","alert","fetchWeatherData","cityName","charAt","toUpperCase","slice","toLowerCase","some","city","name","url","get","subscribe","data","cityWeather","temperature","main","temp","humidity","push","error","console","log","removeCity","index","indexOf","splice","getBackgroundImageUrl","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { WeatherService } from '../services/weather.service';\n\ninterface CityWeather {\n  name: string;\n  temperature: number;\n  humidity: number;\n}\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent {\n  cities: CityWeather[] = [];\n  cityInput: string = '';\n  private apiUrl = 'http://localhost:8080/weather';\n\n  constructor(private http: HttpClient) {}\n\n  addCity(): void {\n    if (this.cityInput) {\n      const formattedCityName = this.formatCityName(this.cityInput);\n  \n      // Check if the city already exists\n      if (this.isCityDuplicate(formattedCityName)) {\n        alert('City already exists!');\n      } else {\n        this.fetchWeatherData(formattedCityName);\n      }\n      \n      this.cityInput = '';\n    }\n  }\n\n  private formatCityName(cityName: string): string {\n    return cityName.charAt(0).toUpperCase() + cityName.slice(1).toLowerCase();\n  }\n\n  private isCityDuplicate(cityName: string): boolean {\n    return this.cities.some(city => city.name.toLowerCase() === cityName.toLowerCase());\n  }\n\n  private fetchWeatherData(cityName: string): void {\n    const url = `${this.apiUrl}/${cityName}`;\n    this.http.get(url).subscribe(\n      (data: any) => {\n        const cityWeather: CityWeather = {\n          name: cityName,\n          temperature: data.main.temp,\n          humidity: data.main.humidity\n        };\n        this.cities.push(cityWeather);\n      },\n      (error) => {\n        console.log(error);\n        alert('Error fetching weather data. Please try again later.');\n      }\n    );\n  }\n\n  removeCity(city: CityWeather): void {\n    const index = this.cities.indexOf(city);\n    if (index !== -1) {\n      this.cities.splice(index, 1);\n    }\n  }\n\n  getBackgroundImageUrl(temperature: number): string {\n    if (temperature > 30) {\n      return '../../assets/sunny.webp';\n    } else if (temperature < 20) {\n      return '../assets/Cold.webp';\n    } else {\n      return '../../assets/sunny.webp';\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAclC,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,MAAM,GAAkB,EAAE;IAC1B,KAAAC,SAAS,GAAW,EAAE;IACd,KAAAC,MAAM,GAAG,+BAA+B;EAET;EAEvCC,OAAOA,CAAA;IACL,IAAI,IAAI,CAACF,SAAS,EAAE;MAClB,MAAMG,iBAAiB,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAACJ,SAAS,CAAC;MAE7D;MACA,IAAI,IAAI,CAACK,eAAe,CAACF,iBAAiB,CAAC,EAAE;QAC3CG,KAAK,CAAC,sBAAsB,CAAC;OAC9B,MAAM;QACL,IAAI,CAACC,gBAAgB,CAACJ,iBAAiB,CAAC;;MAG1C,IAAI,CAACH,SAAS,GAAG,EAAE;;EAEvB;EAEQI,cAAcA,CAACI,QAAgB;IACrC,OAAOA,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGF,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;EAC3E;EAEQP,eAAeA,CAACG,QAAgB;IACtC,OAAO,IAAI,CAACT,MAAM,CAACc,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACH,WAAW,EAAE,KAAKJ,QAAQ,CAACI,WAAW,EAAE,CAAC;EACrF;EAEQL,gBAAgBA,CAACC,QAAgB;IACvC,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAACf,MAAM,IAAIO,QAAQ,EAAE;IACxC,IAAI,CAACV,IAAI,CAACmB,GAAG,CAACD,GAAG,CAAC,CAACE,SAAS,CACzBC,IAAS,IAAI;MACZ,MAAMC,WAAW,GAAgB;QAC/BL,IAAI,EAAEP,QAAQ;QACda,WAAW,EAAEF,IAAI,CAACG,IAAI,CAACC,IAAI;QAC3BC,QAAQ,EAAEL,IAAI,CAACG,IAAI,CAACE;OACrB;MACD,IAAI,CAACzB,MAAM,CAAC0B,IAAI,CAACL,WAAW,CAAC;IAC/B,CAAC,EACAM,KAAK,IAAI;MACRC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBpB,KAAK,CAAC,sDAAsD,CAAC;IAC/D,CAAC,CACF;EACH;EAEAuB,UAAUA,CAACf,IAAiB;IAC1B,MAAMgB,KAAK,GAAG,IAAI,CAAC/B,MAAM,CAACgC,OAAO,CAACjB,IAAI,CAAC;IACvC,IAAIgB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAAC/B,MAAM,CAACiC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEhC;EAEAG,qBAAqBA,CAACZ,WAAmB;IACvC,IAAIA,WAAW,GAAG,EAAE,EAAE;MACpB,OAAO,yBAAyB;KACjC,MAAM,IAAIA,WAAW,GAAG,EAAE,EAAE;MAC3B,OAAO,qBAAqB;KAC7B,MAAM;MACL,OAAO,yBAAyB;;EAEpC;CACD;AAhEYzB,gBAAgB,GAAAsC,UAAA,EAL5BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWzC,gBAAgB,CAgE5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}