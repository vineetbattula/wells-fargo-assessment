{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/weather.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction WeatherComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8);\n    i0.ɵɵlistener(\"click\", function WeatherComponent_div_8_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const city_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeCity(city_r1));\n    });\n    i0.ɵɵtext(2, \"\\u2715\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 9)(4, \"div\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 11)(7, \"div\", 12);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 13);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const city_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-image\", \"url(\" + ctx_r0.getBackgroundImageUrl(city_r1.temperature) + \")\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(city_r1.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Temperature: \", i0.ɵɵpipeBind2(9, 5, city_r1.temperature, \"1.0-0\"), \"\\u00B0C\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Humidity: \", city_r1.humidity, \"%\");\n  }\n}\nexport class WeatherComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.cities = [];\n    this.cityInput = '';\n    this.apiUrl = 'http://localhost:8080/weather';\n  }\n  addCity() {\n    if (this.cityInput) {\n      const formattedCityName = this.formatCityName(this.cityInput);\n      // Validate city name\n      if (!this.isValidCityName(formattedCityName)) {\n        alert('Invalid city name. Please enter a valid city name without leading/trailing spaces, numbers, or special characters.');\n        return;\n      }\n      // Check if the city already exists\n      if (this.isCityDuplicate(formattedCityName)) {\n        alert('City already exists!');\n      } else {\n        this.fetchWeatherData(formattedCityName);\n      }\n      this.cityInput = '';\n    }\n  }\n  isValidCityName(cityName) {\n    // Check for leading/trailing spaces, numbers, or special characters\n    const regex = /^[A-Za-z]+$/;\n    return cityName.trim().length > 0 && regex.test(cityName);\n  }\n  // add number validation for city or special character\n  formatCityName(cityName) {\n    return cityName.charAt(0).toUpperCase() + cityName.slice(1).toLowerCase();\n  }\n  isCityDuplicate(cityName) {\n    return this.cities.some(city => city.name.toLowerCase() === cityName.toLowerCase());\n  }\n  fetchWeatherData(cityName) {\n    this.weatherService.getWeather(cityName).subscribe(data => {\n      const cityWeather = {\n        name: cityName,\n        temperature: data.main.temp,\n        humidity: data.main.humidity\n      };\n      this.cities.push(cityWeather);\n    }, error => {\n      console.log(error);\n      if (error && error.message === 'City not found') {\n        alert(`City \"${cityName}\" does not exist.`);\n      } else {\n        alert('Error fetching weather data. Please try again later.');\n      }\n    });\n  }\n  removeCity(city) {\n    const index = this.cities.indexOf(city);\n    if (index !== -1) {\n      this.cities.splice(index, 1);\n    }\n  }\n  getBackgroundImageUrl(temperature) {\n    if (temperature < 20) {\n      return '../../assets/Cold.webp';\n    } else {\n      return '../../assets/sunny.webp';\n    }\n  }\n}\nWeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n  return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\nWeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WeatherComponent,\n  selectors: [[\"app-weather\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[1, \"container\"], [1, \"title\"], [1, \"input-container\"], [\"type\", \"text\", \"placeholder\", \"Enter city name\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [1, \"cards-container\"], [\"class\", \"card\", 3, \"background-image\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\"], [1, \"remove-cross\", 3, \"click\"], [1, \"city-details\"], [1, \"location\"], [1, \"details-bottom\"], [1, \"temperature\"], [1, \"humidity\"]],\n  template: function WeatherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Weather App\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function WeatherComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.cityInput = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_5_listener() {\n        return ctx.addCity();\n      });\n      i0.ɵɵtext(6, \"Add City\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵtemplate(8, WeatherComponent_div_8_Template, 12, 8, \"div\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.cityInput);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cities);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DecimalPipe],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","WeatherComponent_div_8_Template_div_click_1_listener","restoredCtx","ɵɵrestoreView","_r3","city_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","removeCity","ɵɵtext","ɵɵelementEnd","ɵɵstyleProp","ctx_r0","getBackgroundImageUrl","temperature","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵtextInterpolate1","ɵɵpipeBind2","humidity","WeatherComponent","constructor","weatherService","cities","cityInput","apiUrl","addCity","formattedCityName","formatCityName","isValidCityName","alert","isCityDuplicate","fetchWeatherData","cityName","regex","trim","length","test","charAt","toUpperCase","slice","toLowerCase","some","city","getWeather","subscribe","data","cityWeather","main","temp","push","error","console","log","message","index","indexOf","splice","ɵɵdirectiveInject","i1","WeatherService","selectors","decls","vars","consts","template","WeatherComponent_Template","rf","ctx","WeatherComponent_Template_input_ngModelChange_4_listener","$event","WeatherComponent_Template_button_click_5_listener","ɵɵtemplate","WeatherComponent_div_8_Template","ɵɵproperty"],"sources":["/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.ts","/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { WeatherService } from '../services/weather.service';\n\ninterface CityWeather {\n  name: string;\n  temperature: number;\n  humidity: number;\n}\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent {\n  cities: CityWeather[] = [];\n  cityInput: string = '';\n  private apiUrl = 'http://localhost:8080/weather';\n\n  constructor(private weatherService: WeatherService) {}\n\n  addCity(): void {\n    if (this.cityInput) {\n      const formattedCityName = this.formatCityName(this.cityInput);\n  \n      // Validate city name\n      if (!this.isValidCityName(formattedCityName)) {\n        alert('Invalid city name. Please enter a valid city name without leading/trailing spaces, numbers, or special characters.');\n        return;\n      }\n  \n      // Check if the city already exists\n      if (this.isCityDuplicate(formattedCityName)) {\n        alert('City already exists!');\n      } else {\n        this.fetchWeatherData(formattedCityName);\n      }\n  \n      this.cityInput = '';\n    }\n  }\n  \n  private isValidCityName(cityName: string): boolean {\n    // Check for leading/trailing spaces, numbers, or special characters\n    const regex = /^[A-Za-z]+$/;\n    return cityName.trim().length > 0 && regex.test(cityName);\n  }\n  \n\n  // add number validation for city or special character\n\n  private formatCityName(cityName: string): string {\n    return cityName.charAt(0).toUpperCase() + cityName.slice(1).toLowerCase();\n  }\n\n  private isCityDuplicate(cityName: string): boolean {\n    return this.cities.some(city => city.name.toLowerCase() === cityName.toLowerCase());\n  }\n\n  private fetchWeatherData(cityName: string): void {\n    this.weatherService.getWeather(cityName).subscribe(\n      (data: any) => {\n        const cityWeather: CityWeather = {\n          name: cityName,\n          temperature: data.main.temp,\n          humidity: data.main.humidity\n        };\n        this.cities.push(cityWeather);\n      },\n      (error: any) => {\n        console.log(error);\n        if (error && error.message === 'City not found') {\n          alert(`City \"${cityName}\" does not exist.`);\n        } else {\n          alert('Error fetching weather data. Please try again later.');\n        }\n      }\n    );\n  }\n  \n  \n\n  \n\n  removeCity(city: CityWeather): void {\n    const index = this.cities.indexOf(city);\n    if (index !== -1) {\n      this.cities.splice(index, 1);\n    }\n  }\n\n  getBackgroundImageUrl(temperature: number): string {\n    if (temperature < 20) {\n      return '../../assets/Cold.webp';\n    } else {\n      return '../../assets/sunny.webp';\n    }\n  }\n}\n","<div class=\"container\">\n    <h1 class=\"title\">Weather App</h1>\n    <div class=\"input-container\">\n      <input type=\"text\" [(ngModel)]=\"cityInput\" placeholder=\"Enter city name\">\n      <button (click)=\"addCity()\">Add City</button>\n    </div>\n    \n    <div class=\"cards-container\">\n      <div class=\"card\" *ngFor=\"let city of cities\" [style.background-image]=\"'url(' + getBackgroundImageUrl(city.temperature) + ')'\">\n        <div class=\"remove-cross\" (click)=\"removeCity(city)\">&#10005;</div>\n        <div class=\"city-details\">\n          <div class=\"location\">{{ city.name }}</div>\n          <div class=\"details-bottom\">\n            <div class=\"temperature\">Temperature: {{ city.temperature | number: '1.0-0'}}°C</div>\n            <div class=\"humidity\">Humidity: {{ city.humidity }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}