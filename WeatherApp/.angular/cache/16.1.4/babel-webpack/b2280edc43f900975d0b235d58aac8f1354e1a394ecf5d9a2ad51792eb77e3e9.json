{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction WeatherComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8)(2, \"div\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 10)(5, \"div\", 11);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 12);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const city_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-image\", \"url(\" + ctx_r0.getBackgroundImageUrl(city_r1.temperature) + \")\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(city_r1.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Temperature: \", i0.ɵɵpipeBind2(7, 5, city_r1.temperature, \"1.0-0\"), \"\\u00B0C\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Humidity: \", city_r1.humidity, \"%\");\n  }\n}\nexport class WeatherComponent {\n  constructor(http) {\n    this.http = http;\n    this.cities = [];\n    this.cityInput = '';\n    this.apiUrl = 'http://localhost:8080/weather';\n  }\n  addCity() {\n    if (this.cityInput) {\n      const cityName = this.cityInput.trim();\n      this.fetchWeatherData(cityName);\n      this.cityInput = '';\n    }\n  }\n  fetchWeatherData(cityName) {\n    const url = `${this.apiUrl}/${cityName}`;\n    this.http.get(url).subscribe(data => {\n      const cityWeather = {\n        name: cityName,\n        temperature: data.main.temp,\n        humidity: data.main.humidity\n      };\n      this.cities.push(cityWeather);\n    }, error => {\n      console.log(error);\n    });\n  }\n  getBackgroundImageUrl(temperature) {\n    if (temperature > 30) {\n      return '../../assets/sunny.webp';\n    } else if (temperature < 20) {\n      return '../assets/Cold.webp';\n    } else {\n      return '../../assets/';\n    }\n  }\n}\nWeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n  return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nWeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WeatherComponent,\n  selectors: [[\"app-weather\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[1, \"container\"], [1, \"title\"], [1, \"input-container\"], [\"type\", \"text\", \"placeholder\", \"Enter city name\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [1, \"cards-container\"], [\"class\", \"card\", 3, \"background-image\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\"], [1, \"city-details\"], [1, \"location\"], [1, \"details-bottom\"], [1, \"temperature\"], [1, \"humidity\"]],\n  template: function WeatherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Weather App\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function WeatherComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.cityInput = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_5_listener() {\n        return ctx.addCity();\n      });\n      i0.ɵɵtext(6, \"Add City\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵtemplate(8, WeatherComponent_div_8_Template, 10, 8, \"div\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.cityInput);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cities);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DecimalPipe],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵstyleProp","ctx_r0","getBackgroundImageUrl","city_r1","temperature","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵtextInterpolate1","ɵɵpipeBind2","humidity","WeatherComponent","constructor","http","cities","cityInput","apiUrl","addCity","cityName","trim","fetchWeatherData","url","get","subscribe","data","cityWeather","main","temp","push","error","console","log","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","WeatherComponent_Template","rf","ctx","ɵɵlistener","WeatherComponent_Template_input_ngModelChange_4_listener","$event","WeatherComponent_Template_button_click_5_listener","ɵɵtemplate","WeatherComponent_div_8_Template","ɵɵproperty"],"sources":["/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.ts","/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.html"],"sourcesContent":["// old code \n\n\n// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { WeatherService } from '../services/weather.service';\n\n// @Component({\n//   selector: 'app-weather',\n//   templateUrl: './weather.component.html',\n//   styleUrls: ['./weather.component.css']\n// })\n// export class WeatherComponent {\n\n//   weather: any;\n//   city: string = '';\n//   //constructor(private weatherService : WeatherService){ } \n//   constructor(private http: HttpClient){}\n  \n//   private apiUrl = 'http://localhost:8080/weather';\n//   // call the service from getWeather and make the service call the api\n//   getWeather(city : string) : void {\n//     console.log(\"get weather\");\n//     console.log(city);\n//     const url = `${this.apiUrl}/${city}`;\n//     console.log(url);\n//     let response = this.http.get(url);\n//     console.log(response);\n//     response.subscribe(\n//       (data) => { \n//       this.weather=data;\n//       console.log(this.weather);\n//       console.log(\"max temp \", this.weather.main.temp_max);\n//       console.log(\"max temp \", this.weather.main.temp_min);\n//     },\n//     (error) => {\n//       console.log(error);\n//     }\n//     );\n//     console.log(\"abcd\");\n//   }\n\n//   onSubmit() : void {\n//     this.getWeather(this.city);\n//   }\n// }\n\n// new code  but not so good ui\n\n// import { Component } from '@angular/core';\n\n// interface CityWeather {\n//   city: string;\n//   temperature: number;\n// }\n\n// @Component({\n//   selector: 'app-weather',\n//   templateUrl: './weather.component.html',\n//   styleUrls: ['./weather.component.css']\n// })\n// export class WeatherComponent {\n//   cityWeatherList: CityWeather[] = [];\n//   newCity: string = '';\n\n//   addCity(): void {\n//     if (this.newCity.trim() !== '') {\n//       // Make API call and fetch temperature for the new city\n//       const temperature = this.getTemperature(this.newCity);\n\n//       // Create a new CityWeather object and add it to the cityWeatherList\n//       const cityWeather: CityWeather = {\n//         city: this.newCity,\n//         temperature: temperature\n//       };\n//       this.cityWeatherList.push(cityWeather);\n\n//       // Clear the input field\n//       this.newCity = '';\n//     }\n//   }\n\n//   getTemperature(city: string): number {\n//     // Perform API call to fetch temperature for the city\n//     // Replace this with your actual API call logic\n//     // For demo purposes, return a random temperature\n//     return Math.floor(Math.random() * (30 - 10 + 1)) + 10;\n//   }\n// }\n\n\n// trying out card ts for card html\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\n\ninterface CityWeather {\n  name: string;\n  temperature: number;\n  humidity: number;\n}\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent {\n  cities: CityWeather[] = [];\n  cityInput: string = '';\n  private apiUrl = 'http://localhost:8080/weather';\n\n  constructor(private http: HttpClient) {}\n\n  addCity(): void {\n    if (this.cityInput) {\n      const cityName = this.cityInput.trim();\n      this.fetchWeatherData(cityName);\n      this.cityInput = '';\n    }\n  }\n\n  fetchWeatherData(cityName: string): void {\n    const url = `${this.apiUrl}/${cityName}`;\n    this.http.get(url).subscribe(\n      (data: any) => {\n        const cityWeather: CityWeather = {\n          name: cityName,\n          temperature: data.main.temp,\n          humidity: data.main.humidity\n        };\n        this.cities.push(cityWeather);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  getBackgroundImageUrl(temperature: number): string {\n    if (temperature > 30) {\n      return '../../assets/sunny.webp';\n    } else if (temperature < 20) {\n      return '../assets/Cold.webp';\n    } else {\n      return '../../assets/';\n    }\n  }\n}\n\n","<!-- old code  -->\n<!-- <div class=\"container\"> \n    <div class=\"upper-data\">\n        <img src=\"../../assets/sunny.webp\" *ngIf=\"2<1\"/>\n        <img src=\"../../assets/Cold.webp\" *ngIf=\"1<2\"/>\n\n        <div class=\"weather-data\">\n         <div class=\"location\">Wellington</div>\n         <div class=\"temperature\">{{ 14.40 | number: '1.0-0'}}°C</div>\n        </div>\n    </div>\n\n    <div class=\"lower-data\">\n        <div class=\"more-info-label\">\n            More Information\n        </div>\n        <div class=\"more-info-container\">\n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/cold.png\" >\n                    <span>min</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/hot.png\" >\n                    <span>max</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n            \n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/cold-temp.jpeg\" >\n                    <span>humidity</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/cold-temp.jpeg\" >\n                    <span>wind</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div> -->\n\n\n<!-- new code but not so good -->\n\n<!-- <div class=\"container\">\n    <div class=\"upper-data\">\n      <img src=\"../../assets/sunny.webp\" *ngIf=\"2 < 1\" />\n      <img src=\"../../assets/Cold.webp\" *ngIf=\"1 < 2\" />\n  \n      <div class=\"weather-data\">\n        <div class=\"location\">Wellington</div>\n        <div class=\"temperature\">{{ 14.40 | number: '1.0-0' }}°C</div>\n      </div>\n    </div>\n  \n    <div class=\"lower-data\">\n      <div class=\"more-info-label\">\n        More Information\n      </div>\n      <div class=\"more-info-container\">\n        <div class=\"info-block\">\n          <div class=\"info-block-label\">\n            <img src=\"../../assets/cold.png\" />\n            <span>min</span>\n          </div>\n          <div class=\"info-block-value\">\n            10°C\n          </div>\n        </div>\n        <div class=\"info-block\">\n          <div class=\"info-block-label\">\n            <img src=\"../../assets/hot.png\" />\n            <span>max</span>\n          </div>\n          <div class=\"info-block-value\">\n            10°C\n          </div>\n        </div>\n  \n        <div class=\"info-block\" *ngFor=\"let cityWeather of cityWeatherList\">\n          <div class=\"info-block-label\">\n            <img src=\"../../assets/cold-temp.jpeg\" />\n            <span>{{ cityWeather.city }}</span>\n          </div>\n          <div class=\"info-block-value\">\n            {{ cityWeather.temperature }}°C\n          </div>\n        </div>\n      </div>\n    </div>\n  \n    <div class=\"city-input\">\n      <input type=\"text\" [(ngModel)]=\"newCity\" placeholder=\"Enter city name\" />\n      <button (click)=\"addCity()\">Add City</button>\n    </div>\n  </div> -->\n\n  <!-- new card layout -->\n\n  <!-- <div class=\"card-container\">\n    <div *ngFor=\"let city of cities\" class=\"card\">\n      <div class=\"card-header\">\n        <h3>{{ city.name }}</h3>\n      </div>\n      <div class=\"card-body\">\n        <p>Temperature: {{ city.temperature }}°C</p>\n        <p>Humidity: {{ city.humidity }}%</p>\n        \n      </div>\n    </div>\n  </div> -->\n\n  <div class=\"container\">\n    <h1 class=\"title\">Weather App</h1>\n    <div class=\"input-container\">\n      <input type=\"text\" [(ngModel)]=\"cityInput\" placeholder=\"Enter city name\">\n      <button (click)=\"addCity()\">Add City</button>\n    </div>\n    \n    <div class=\"cards-container\">\n      <div class=\"card\" *ngFor=\"let city of cities\" [style.background-image]=\"'url(' + getBackgroundImageUrl(city.temperature) + ')'\">\n        <div class=\"city-details\">\n          <div class=\"location\">{{ city.name }}</div>\n          <div class=\"details-bottom\">\n            <div class=\"temperature\">Temperature: {{ city.temperature | number: '1.0-0'}}°C</div>\n            <div class=\"humidity\">Humidity: {{ city.humidity }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  \n  \n\n  \n\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}