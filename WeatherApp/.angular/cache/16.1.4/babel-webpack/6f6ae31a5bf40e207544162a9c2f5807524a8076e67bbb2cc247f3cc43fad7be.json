{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction WeatherComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 5)(2, \"h2\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const city_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"background-image\", \"url(\" + ctx_r2.getBackgroundImageUrl(city_r3.temperature) + \")\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(city_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Temperature: \", city_r3.temperature, \"\\u00B0C\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Humidity: \", city_r3.humidity, \"%\");\n  }\n}\nfunction WeatherComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"div\", 3);\n    i0.ɵɵtemplate(2, WeatherComponent_div_1_div_2_Template, 8, 5, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const city_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-image\", \"url(\" + ctx_r0.getBackgroundImageUrl(city_r1.temperature) + \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.cities);\n  }\n}\n// @Component({\n//   selector: 'app-weather',\n//   templateUrl: './weather.component.html',\n//   styleUrls: ['./weather.component.css']\n// })\n// export class WeatherComponent {\n//   weather: any;\n//   city: string = '';\n//   //constructor(private weatherService : WeatherService){ } \n//   constructor(private http: HttpClient){}\n//   private apiUrl = 'http://localhost:8080/weather';\n//   // call the service from getWeather and make the service call the api\n//   getWeather(city : string) : void {\n//     console.log(\"get weather\");\n//     console.log(city);\n//     const url = `${this.apiUrl}/${city}`;\n//     console.log(url);\n//     let response = this.http.get(url);\n//     console.log(response);\n//     response.subscribe(\n//       (data) => { \n//       this.weather=data;\n//       console.log(this.weather);\n//       console.log(\"max temp \", this.weather.main.temp_max);\n//       console.log(\"max temp \", this.weather.main.temp_min);\n//     },\n//     (error) => {\n//       console.log(error);\n//     }\n//     );\n//     console.log(\"abcd\");\n//   }\n//   onSubmit() : void {\n//     this.getWeather(this.city);\n//   }\n// }\n// new code  but not so good ui\n// import { Component } from '@angular/core';\n// interface CityWeather {\n//   city: string;\n//   temperature: number;\n// }\n// @Component({\n//   selector: 'app-weather',\n//   templateUrl: './weather.component.html',\n//   styleUrls: ['./weather.component.css']\n// })\n// export class WeatherComponent {\n//   cityWeatherList: CityWeather[] = [];\n//   newCity: string = '';\n//   addCity(): void {\n//     if (this.newCity.trim() !== '') {\n//       // Make API call and fetch temperature for the new city\n//       const temperature = this.getTemperature(this.newCity);\n//       // Create a new CityWeather object and add it to the cityWeatherList\n//       const cityWeather: CityWeather = {\n//         city: this.newCity,\n//         temperature: temperature\n//       };\n//       this.cityWeatherList.push(cityWeather);\n//       // Clear the input field\n//       this.newCity = '';\n//     }\n//   }\n//   getTemperature(city: string): number {\n//     // Perform API call to fetch temperature for the city\n//     // Replace this with your actual API call logic\n//     // For demo purposes, return a random temperature\n//     return Math.floor(Math.random() * (30 - 10 + 1)) + 10;\n//   }\n// }\n// trying out card ts for card html\nexport class WeatherComponent {\n  constructor() {\n    this.cities = [{\n      name: 'Thane',\n      temperature: 31,\n      humidity: 60,\n      expanded: false\n    }, {\n      name: 'Raleigh',\n      temperature: 31,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Australia',\n      temperature: 19,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Raleigh',\n      temperature: 31,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Australia',\n      temperature: 19,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Raleigh',\n      temperature: 31,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Australia',\n      temperature: 19,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Raleigh',\n      temperature: 31,\n      humidity: 70,\n      expanded: false\n    }, {\n      name: 'Australia',\n      temperature: 19,\n      humidity: 70,\n      expanded: false\n    }\n    // Add more cities as needed\n    ];\n  }\n\n  getBackgroundImageUrl(city) {\n    if (city.temperature > 30) {\n      return '../../assets/sunny.webp';\n    } else if (city.temperature < 20) {\n      return '../assets/Cold.webp';\n    } else {\n      return 'path-to-normal-image.jpg';\n    }\n  }\n}\nWeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n  return new (t || WeatherComponent)();\n};\nWeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WeatherComponent,\n  selectors: [[\"app-weather\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"card\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\"], [1, \"city-image\"], [\"class\", \"card\", 3, \"background-image\", 4, \"ngFor\", \"ngForOf\"], [1, \"city-details\"]],\n  template: function WeatherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, WeatherComponent_div_1_Template, 3, 3, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cities);\n    }\n  },\n  dependencies: [i1.NgForOf],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵstyleProp","ctx_r2","getBackgroundImageUrl","city_r3","temperature","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵtextInterpolate1","humidity","ɵɵelement","ɵɵtemplate","WeatherComponent_div_1_div_2_Template","ctx_r0","city_r1","ɵɵproperty","cities","WeatherComponent","constructor","expanded","city","selectors","decls","vars","consts","template","WeatherComponent_Template","rf","ctx","WeatherComponent_div_1_Template"],"sources":["/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.ts","/Users/vineetbattula/WellsFargoAssessment/WeatherApp/src/app/weather/weather.component.html"],"sourcesContent":["// old code \n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { WeatherService } from '../services/weather.service';\n\n// @Component({\n//   selector: 'app-weather',\n//   templateUrl: './weather.component.html',\n//   styleUrls: ['./weather.component.css']\n// })\n// export class WeatherComponent {\n\n//   weather: any;\n//   city: string = '';\n//   //constructor(private weatherService : WeatherService){ } \n//   constructor(private http: HttpClient){}\n  \n//   private apiUrl = 'http://localhost:8080/weather';\n//   // call the service from getWeather and make the service call the api\n//   getWeather(city : string) : void {\n//     console.log(\"get weather\");\n//     console.log(city);\n//     const url = `${this.apiUrl}/${city}`;\n//     console.log(url);\n//     let response = this.http.get(url);\n//     console.log(response);\n//     response.subscribe(\n//       (data) => { \n//       this.weather=data;\n//       console.log(this.weather);\n//       console.log(\"max temp \", this.weather.main.temp_max);\n//       console.log(\"max temp \", this.weather.main.temp_min);\n//     },\n//     (error) => {\n//       console.log(error);\n//     }\n//     );\n//     console.log(\"abcd\");\n//   }\n\n//   onSubmit() : void {\n//     this.getWeather(this.city);\n//   }\n// }\n\n// new code  but not so good ui\n\n// import { Component } from '@angular/core';\n\n// interface CityWeather {\n//   city: string;\n//   temperature: number;\n// }\n\n// @Component({\n//   selector: 'app-weather',\n//   templateUrl: './weather.component.html',\n//   styleUrls: ['./weather.component.css']\n// })\n// export class WeatherComponent {\n//   cityWeatherList: CityWeather[] = [];\n//   newCity: string = '';\n\n//   addCity(): void {\n//     if (this.newCity.trim() !== '') {\n//       // Make API call and fetch temperature for the new city\n//       const temperature = this.getTemperature(this.newCity);\n\n//       // Create a new CityWeather object and add it to the cityWeatherList\n//       const cityWeather: CityWeather = {\n//         city: this.newCity,\n//         temperature: temperature\n//       };\n//       this.cityWeatherList.push(cityWeather);\n\n//       // Clear the input field\n//       this.newCity = '';\n//     }\n//   }\n\n//   getTemperature(city: string): number {\n//     // Perform API call to fetch temperature for the city\n//     // Replace this with your actual API call logic\n//     // For demo purposes, return a random temperature\n//     return Math.floor(Math.random() * (30 - 10 + 1)) + 10;\n//   }\n// }\n\n\n// trying out card ts for card html\n@Component({\n    selector: 'app-weather',\n    templateUrl: './weather.component.html',\n    styleUrls: ['./weather.component.css']\n  })\nexport class WeatherComponent {\n  cities: any[] = [\n    { name: 'Thane', temperature: 31, humidity: 60, expanded: false },\n    { name: 'Raleigh', temperature:31, humidity: 70, expanded: false },\n    { name: 'Australia', temperature: 19, humidity: 70, expanded: false },\n    { name: 'Raleigh', temperature:31, humidity: 70, expanded: false },\n    { name: 'Australia', temperature: 19, humidity: 70, expanded: false },\n    { name: 'Raleigh', temperature:31, humidity: 70, expanded: false },\n    { name: 'Australia', temperature: 19, humidity: 70, expanded: false },\n    { name: 'Raleigh', temperature:31, humidity: 70, expanded: false },\n    { name: 'Australia', temperature: 19, humidity: 70, expanded: false },\n    // Add more cities as needed\n  ];\n\n\n  getBackgroundImageUrl(city: any): string {\n    if (city.temperature > 30) {\n      return '../../assets/sunny.webp';\n    } else if (city.temperature < 20) {\n      return '../assets/Cold.webp';\n    } else {\n      return 'path-to-normal-image.jpg';\n    }\n  }\n\n  // Other component logic...\n}\n\n\n","<!-- old code  -->\n<!-- <div class=\"container\"> \n    <div class=\"upper-data\">\n        <img src=\"../../assets/sunny.webp\" *ngIf=\"2<1\"/>\n        <img src=\"../../assets/Cold.webp\" *ngIf=\"1<2\"/>\n\n        <div class=\"weather-data\">\n         <div class=\"location\">Wellington</div>\n         <div class=\"temperature\">{{ 14.40 | number: '1.0-0'}}°C</div>\n        </div>\n    </div>\n\n    <div class=\"lower-data\">\n        <div class=\"more-info-label\">\n            More Information\n        </div>\n        <div class=\"more-info-container\">\n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/cold.png\" >\n                    <span>min</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/hot.png\" >\n                    <span>max</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n            \n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/cold-temp.jpeg\" >\n                    <span>humidity</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n            <div class=\"info-block\">\n                <div class=\"info-block-label\">\n                    <img src=\"../../assets/cold-temp.jpeg\" >\n                    <span>wind</span>\n                </div>\n                <div class=\"info-block-value\">\n                    10°C\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div> -->\n\n\n<!-- new code but not so good -->\n\n<!-- <div class=\"container\">\n    <div class=\"upper-data\">\n      <img src=\"../../assets/sunny.webp\" *ngIf=\"2 < 1\" />\n      <img src=\"../../assets/Cold.webp\" *ngIf=\"1 < 2\" />\n  \n      <div class=\"weather-data\">\n        <div class=\"location\">Wellington</div>\n        <div class=\"temperature\">{{ 14.40 | number: '1.0-0' }}°C</div>\n      </div>\n    </div>\n  \n    <div class=\"lower-data\">\n      <div class=\"more-info-label\">\n        More Information\n      </div>\n      <div class=\"more-info-container\">\n        <div class=\"info-block\">\n          <div class=\"info-block-label\">\n            <img src=\"../../assets/cold.png\" />\n            <span>min</span>\n          </div>\n          <div class=\"info-block-value\">\n            10°C\n          </div>\n        </div>\n        <div class=\"info-block\">\n          <div class=\"info-block-label\">\n            <img src=\"../../assets/hot.png\" />\n            <span>max</span>\n          </div>\n          <div class=\"info-block-value\">\n            10°C\n          </div>\n        </div>\n  \n        <div class=\"info-block\" *ngFor=\"let cityWeather of cityWeatherList\">\n          <div class=\"info-block-label\">\n            <img src=\"../../assets/cold-temp.jpeg\" />\n            <span>{{ cityWeather.city }}</span>\n          </div>\n          <div class=\"info-block-value\">\n            {{ cityWeather.temperature }}°C\n          </div>\n        </div>\n      </div>\n    </div>\n  \n    <div class=\"city-input\">\n      <input type=\"text\" [(ngModel)]=\"newCity\" placeholder=\"Enter city name\" />\n      <button (click)=\"addCity()\">Add City</button>\n    </div>\n  </div> -->\n\n  <!-- new card layout -->\n\n  <!-- <div class=\"card-container\">\n    <div *ngFor=\"let city of cities\" class=\"card\">\n      <div class=\"card-header\">\n        <h3>{{ city.name }}</h3>\n      </div>\n      <div class=\"card-body\">\n        <p>Temperature: {{ city.temperature }}°C</p>\n        <p>Humidity: {{ city.humidity }}%</p>\n        \n      </div>\n    </div>\n  </div> -->\n\n  <div class=\"container\">\n    <div class=\"card\" *ngFor=\"let city of cities\">\n      <div class=\"city-image\" [style.background-image]=\"'url(' + getBackgroundImageUrl(city.temperature) + ')'\"></div>\n      <div class=\"card\" *ngFor=\"let city of cities\" [style.background-image]=\"'url(' + getBackgroundImageUrl(city.temperature) + ')'\">\n\n      <div class=\"city-details\">\n        <h2>{{ city.name }}</h2>\n        <p>Temperature: {{ city.temperature }}°C</p>\n        <p>Humidity: {{ city.humidity }}%</p>\n      </div>\n    </div>\n  </div>\n  \n  \n\n  \n\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}